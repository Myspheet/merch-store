// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id       Int       @id @default(autoincrement())
  slug     String?   @unique
  name     String
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id              Int     @id @default(autoincrement())
  uuid            String  @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug            String? @unique
  name            String
  sku             String  @unique
  price           Decimal
  discountedPrice Int
  weight          Decimal
  status          Boolean @default(true)
  quantity        Int

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  variations Variation[]
  gallery    Gallery[]
  OrderItem  OrderItem[]
}

model Gallery {
  id        Int     @id @default(autoincrement())
  image_url String
  default   Boolean @default(false)
  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Admin {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  name         String?
  phone_number String?
  password     String?
  role         Int     @default(107)
}

model User {
  id              Int            @id @default(autoincrement())
  email           String         @unique
  name            String?
  phone_number    String?
  password        String?
  signin_provider String?
  refresh_token   String?
  photo_url       String?
  refreshTokens   RefreshToken[]
  role            Int            @default(15)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders    Order[]
}

model RefreshToken {
  id            Int      @id @default(autoincrement())
  refresh_token String   @unique
  access_token  String   @unique
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
}

model Attribute {
  id              Int              @id @default(autoincrement())
  attributeName   String
  attributeCode   String           @unique
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  attributeValues AttributeValue[]
  variation       Variation[]
}

model AttributeValue {
  id       Int     @id @default(autoincrement())
  value    String
  code     String?
  imageUrl String?

  attribute   Attribute   @relation(fields: [attributeId], references: [id])
  attributeId Int
  variation   Variation[]

  @@unique([code, value])
}

model Variation {
  id          Int       @id @default(autoincrement())
  attribute   Attribute @relation(fields: [attributeId], references: [id])
  attributeId Int

  attributeCode String

  attributeValue   AttributeValue @relation(fields: [attributeValueId], references: [id])
  attributeValueId Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Order {
  id                  Int                  @id @default(autoincrement())
  user                User                 @relation(fields: [userId], references: [id])
  userId              Int
  status              OrderStatus          @default(PENDING)
  deliveryInformation DeliveryInformation?
  orderItems          OrderItem[]
  paymentStatus       PaymentStatus        @default(PENDING)
  paymentMethod       PaymentMethod?
  transactionCode     String?
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  order       Order   @relation(fields: [orderId], references: [id])
  orderId     Int
  product     Product @relation(fields: [productId], references: [id])
  productId   Int
  productName String
  price       Decimal
  quantity    Int
  attributes  Json?
  prouctImage String
}

model DeliveryInformation {
  id           Int     @id @default(autoincrement())
  order        Order   @relation(fields: [orderId], references: [id])
  orderId      Int     @unique
  firstName    String
  lastName     String
  address      String
  city         String
  zipCode      String?
  mobileNumber String
  email        String
}

model PaymentMethod {
  id      Int     @id @default(autoincrement())
  name    String
  apiKey  String?
  order   Order   @relation(fields: [orderId], references: [id])
  orderId Int     @unique
}

enum OrderStatus {
  PENDING
  DENIED
  APPROVED
  SHIPPED
  DELIVERED
}

enum PaymentStatus {
  PENDING
  PAID
  REJECTED
  REVERESED
}
